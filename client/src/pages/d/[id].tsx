import Head from "next/head";
import { Inter } from "next/font/google";
import Sidebar from "@/components/Sidebar";
import Prompts from "@/components/prompts";
import Input from "@/components/input";
import styled from "styled-components";
import Output from "@/components/output";
import SmallSidebar from "@/components/SmallSidebar";
import React, { use } from "react";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { Document, documentState, userState } from "@/recoil";
import { useRouter } from "next/router";
import { ask, getDocument, getUser } from "@/recoil/functions";
import { Auth } from "../_app";

const inter = Inter({ subsets: ["latin"] });

const DocumentRender: React.FC<{ documentId?: string; document?: Document }> = (
	props
) => {
	const { documentId, document } = props;
	const uid = useRecoilValue(userState).uid;
	const setUser = useSetRecoilState(userState);

	const setDocuments = useSetRecoilState(documentState);

	const [currentVersion, setCurrentVersion] = React.useState(
		(document?.versions.length || 1) - 1
	);

	const callbackAsk = React.useCallback(
		async (value) => {
			if (!uid) return;
			await ask(uid, value, documentId);
			const documentWithVersions = await getDocument(documentId);
			// it is in format [key]: value
			setDocuments((prev) => {
				return {
					documents: {
						...prev.documents,
						[documentId]: documentWithVersions,
					},
				};
			});
		},
		[uid, documentId]
	);
	return (
		<>
			<Main className={`${inter.className}`}>
				<Sidebar active_id={documentId} />
				<Container>
					<Prompts list={document?.versions || []} />
					<Input onClick={callbackAsk} />
				</Container>
				<Output
					code={document?.versions[currentVersion].content}
					version_id={document?.versions[currentVersion]?._id}
				/>
				<SmallSidebar
					active_version={currentVersion}
					versions_count={document?.versions?.length || 1}
					onSelect={setCurrentVersion}
				/>
			</Main>
		</>
	);
};

export default function DocumentPage() {
	const doc_id = useRouter().query.id as string;
	const document = useRecoilValue(documentState).documents[doc_id];

	const setDocuments = useSetRecoilState(documentState);

	React.useEffect(() => {
		(async () => {
			if (!doc_id) return;
			const documentWithVersions = await getDocument(doc_id);
			console.log(documentWithVersions);
			// it is in format [key]: value
			setDocuments((prev) => {
				return {
					documents: {
						...prev.documents,
						[doc_id]: documentWithVersions,
					},
				};
			});
		})();
	}, [doc_id]);

	if (!document) {
		return <div>Loading...</div>;
	}

	return (
		<>
			<Head>
				<title>Framer Ai</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Auth />
			<DocumentRender documentId={doc_id} document={document} />
		</>
	);
}

const Main = styled.div`
	display: grid;
	grid-template-columns: 256px 4fr 5fr 70px;
`;

const Container = styled.div`
	display: flex;
	height: 100vh;
	flex-direction: column;
	justify-content: space-between;
	box-sizing: border-box;
	padding: 8px;
`;

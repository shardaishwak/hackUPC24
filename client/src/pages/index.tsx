import Head from "next/head";
import { Inter } from "next/font/google";
import Sidebar from "@/components/Sidebar";
import Prompts from "@/components/prompts";
import Input from "@/components/input";
import styled from "styled-components";
import Output from "@/components/output";
import Viewer from "@/components/Viewer";
import SmallSidebar from "@/components/SmallSidebar";
import React from "react";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { userState } from "@/recoil";
import { useRouter } from "next/router";
import { ask, getUser } from "@/recoil/functions";
import { Auth } from "./_app";

const inter = Inter({ subsets: ["latin"] });

const DocumentRender: React.FC<{ documentId?: string }> = (props) => {
	const { documentId } = props;
	const uid = useRecoilValue(userState).uid;
	const router = useRouter();

	const [temporaryPrompt, setTemporaryPrompt] = React.useState<string | null>(
		null
	);

	const callbackAsk = React.useCallback(
		async (value) => {
			if (!uid) return;
			setTemporaryPrompt(value);
			const ask_data = await ask(uid, value, documentId);

			if (!documentId) {
				router.push("/d/" + ask_data?.document?._id);
			}
		},
		[uid, documentId]
	);
	return (
		<>
			<Main className={`${inter.className}`}>
				<Sidebar />
				<Container>
					<Prompts
						list={
							temporaryPrompt
								? ([
										{
											prompt: temporaryPrompt,
											_id: "temp",
											content: "Generating your game...",
											created_at: new Date().toISOString(),
											level: 1,
											title: "Generating your game...",
										},
								  ] as any)
								: []
						}
					/>
					<Input onClick={callbackAsk} />
				</Container>
			</Main>
		</>
	);
};

export default function Home() {
	const uid = useRecoilValue(userState).uid;

	return (
		<>
			<Head>
				<title>Framer Ai</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Auth cacheDocs />

			<DocumentRender />
		</>
	);
}

const Main = styled.div`
	display: grid;
	grid-template-columns: 256px 1fr;
`;

const Container = styled.div`
	display: flex;
	height: 100vh;
	flex-direction: column;
	justify-content: space-between;
	box-sizing: border-box;
	padding: 8px;
	width: 800px;
	margin: 0 auto;
`;
